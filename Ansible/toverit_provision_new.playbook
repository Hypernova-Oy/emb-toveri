---

## IN THIS FILE
#
# This playbook creates a bash script to run in a remote host which needs to be allowed direct access from the Ansible central controller
#
# For example virtualization hosts or externally provisioned virtual machines need to have this script ran on them
#

- hosts: ansible_controller

  vars_prompt:
    - name: "toveri_organization_name"
      prompt: "Give the toveri organization name. Eg. vaara, lumme, ..."
      private: no
    - name: "toveri_name"
      prompt: "Give the toveri name. Eg. liperi, outokumpu-2, suomenniemi, ..."
      private: no

  tasks:
    #Define and validate toveri_inventory_hostname
    - name: Set toveri_inventory_hostname
      set_fact: toveri_inventory_hostname="{{'toveri-' + toveri_organization_name + '-' + toveri_name}}"
    - name: Validate toveri_organization_name
      fail:
        msg: "Variable toveri_organization_name '{{toveri_organization_name}}' is not one of the allowed values 'toveri_allowed_organization_names'"
      when: toveri_organization_name not in toveri_allowed_organization_names
    - name: Check toveri_inventory_hostname
      assert:
        that:
          - "'_' not in  toveri_inventory_hostname" # _ Makes havoc with domain names
          - "'toveri-' in toveri_inventory_hostname" # simple naming convention enforcement
        msg: "toveri_inventory_hostname contains 'toveri' and not '-' or '_'"

    - name: Find max Toveri port in use, to find the next free Toveri port.
      set_fact: max_toveri_port="{{ groups['toveri'] | map('extract', hostvars, 'ansible_port') | list | sort | last }}"
      when: max_toveri_port is not defined

    # Define the toveri_cc_monitoring_remote_port
    - name: Is cc monitoring port already been reserved?
      set_fact: toveri_cc_monitoring_remote_port={{hostvars[toveri_inventory_hostname].zabbix_agent_cc_listenport}}
      when: hostvars[toveri_inventory_hostname]
    - name: Set toveri_cc_monitoring_remote_port
      set_fact: toveri_cc_monitoring_remote_port="{{ (max_toveri_port | int) + 1 - 40000 }}"
      when: not toveri_cc_monitoring_remote_port

    # Define the toveri_cc_ssh_remote_port
    - name: Is cc ssh port already been reserved?
      set_fact: toveri_cc_ssh_remote_port={{hostvars[toveri_inventory_hostname].ansible_port}}
      when: hostvars[toveri_inventory_hostname]
    - name: Set toveri_cc_ssh_remote_port
      set_fact: toveri_cc_ssh_remote_port="{{ (max_toveri_port | int) + 1 }}"
      when: not toveri_cc_ssh_remote_port

    - name: Check toveri_cc ports are valid
      assert:
        that:
          - "toveri_cc_ssh_remote_port is regex('^[0-9]+$')"
          - "toveri_cc_monitoring_remote_port is regex('^[0-9]+$')"
        msg: "toveri_cc_ssh_remote_port and toveri_cc_monitoring_remote_port must be a valid number"

    - name: Create toveri-user
      user:
        name: toveri
        create_home: yes
        generate_ssh_key: yes
        password_lock: yes
      become: yes

    # The keypair needs to be created in advance, so it can be immediately accepted for the central controller.
    # Otherwise if the key is created in the Toveri-device, it must be manually moved away from there first.
    # Now this key-exchange is automated.
    - name: Create ssh-keypair for the new toveri
      shell: ssh-keygen -b 2048 -t rsa -f {{secret}}/id_rsa.{{toveri_inventory_hostname}} -q -N "" -C "toveri@{{toveri_inventory_hostname}}"
      args:
        creates: "{{secret}}/id_rsa.{{toveri_inventory_hostname}}"

    - name: Create a provisioning script
      template:
        src:  "templates/ansible_slave_driver.sh.j2"
        dest: "{{secret}}/ansible_slave_driver.sh"
        mode: 0700
        force: yes

    - name: Encrypt the provisioning script for transport
      command: gpg -c --pinentry-mode=loopback --passphrase "{{ansible_slave_driver_passphrase}}" "{{secret}}/ansible_slave_driver.sh"

    - name: Authorize toveri public key
      authorized_key:
        user: toveri
        state: present
        key: "{{lookup('file', secret+'/id_rsa.'+toveri_inventory_hostname+'.pub')}}"
      become: yes

    - name: Cleanup new toveri keys
      shell: "rm {{secret}}/id_rsa.{{toveri_inventory_hostname}}*"
      args:
        warn: False

    - name: Create host_vars dir
      file:
        path: "{{ansible_config_dir}}/host_vars/{{toveri_inventory_hostname}}"
        state: directory

    - name: Provide a template host_vars
      template:
        src:  "templates/toveri_host_vars.yml"
        dest: "{{ansible_config_dir}}/host_vars/{{toveri_inventory_hostname}}/vars.yml"
        force: false

    - name: Provide a template host_vars vault
      template:
        src:  "templates/toveri_host_vars_vault.yml"
        dest: "{{ansible_config_dir}}/host_vars/{{toveri_inventory_hostname}}/vault.yml"
        force: false
      register: reg_host_vault_created

    - name: Encrypt the vault template
      command:
        cmd:   ansible-vault encrypt {{ansible_config_dir}}/host_vars/{{toveri_inventory_hostname}}/vault.yml
        chdir: "{{playbook_dir}}"
      when: reg_host_vault_created.changed

    - name: Create a inventory entry enabling zabbix
      lineinfile:
        path:   "{{ansible_config_dir}}/inventory"
        regexp: "^{{toveri_inventory_hostname}}\s+zabbix_agent_cc_listenport"
        insertafter: "\\[zabbix_agent\\]"
        line:   "{{toveri_inventory_hostname}} zabbix_agent_cc_listenport={{toveri_cc_monitoring_remote_port}}"

    - name: Create a inventory entry with connection parameters
      lineinfile:
        path:   "{{ansible_config_dir}}/inventory"
        regexp: "^{{toveri_inventory_hostname}}\s+ansible_host"
        insertafter: "\\[toveri\\]"
        line:   "{{toveri_inventory_hostname}} ansible_host={{toveri_inventory_hostname}} ansible_port={{toveri_cc_ssh_remote_port}}"

    - name: Create a inventory group for the Toveri-organization
      lineinfile:
        path:   "{{ansible_config_dir}}/inventory"
        regexp: "^\\[{{toveri_organization_name}}\\]"
        line:   "[{{toveri_organization_name}}]"

    - name: Create a inventory entry with proper organization/group
      lineinfile:
        path:   "{{ansible_config_dir}}/inventory"
        regexp: "^{{toveri_inventory_hostname}}\\s+_grp"
        insertafter: "^\\[{{toveri_organization_name}}\\]"
        line:   "{{toveri_inventory_hostname}} _grp=1"

    - name: Create a inventory group for modern Toveris, so we dont break legacy
      lineinfile:
        path:   "{{ansible_config_dir}}/inventory"
        regexp: "^\\[toveri-modern\\]"
        line:   "[toveri-modern]"

    - name: Create a inventory entry within toveri-modern
      lineinfile:
        path:   "{{ansible_config_dir}}/inventory"
        regexp: "^{{toveri_inventory_hostname}}\\s+_mdr"
        insertafter: "^\\[toveri-modern\\]"
        line:   "{{toveri_inventory_hostname}} _mdr=1"

    - name: Add /etc/hosts entry
      lineinfile:
        path:   "/etc/hosts"
        regexp: "\b{{toveri_inventory_hostname}}\b"
        line:   "127.0.0.1 {{toveri_inventory_hostname}}"
      become: yes

    - name: Add ssh_config entry
      blockinfile:
        path:   "~/.ssh/config"
        create: "yes"
        mode:   "640"
        marker: "# {mark} {{toveri_inventory_hostname}} ANSIBLE MANAGED BLOCK"
        block: |
          Host {{toveri_inventory_hostname}}
            HostName {{toveri_inventory_hostname}}
            Port {{toveri_cc_ssh_remote_port}}
            User root

    - debug: msg="Dynamic inventory updated. Check version control for changes."

    - debug: msg="Script to allow ansible to remotely operate a host is found at '~/ansible_slave_driver.sh'. Run the script in your remote host.\nTHIS SCRIPT CONTAINS THE ANSIBLE SUDO PASSWORD!\nREMOVE THE SCRIPT AFTER USE!"


